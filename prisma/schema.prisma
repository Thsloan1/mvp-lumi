// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ma/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  EDUCATOR
  ADMIN
  OWNER
}

enum Language {
  ENGLISH
  SPANISH
}

enum Severity {
  LOW
  MEDIUM
  HIGH
}

enum EducatorMood {
  OVERWHELMED
  FRUSTRATED
  ANGRY
  MANAGING
  OKAY
  CALM
}

enum OnboardingStatus {
  INCOMPLETE
  COMPLETE
}

enum SubscriptionPlan {
  INDIVIDUAL_MONTHLY
  INDIVIDUAL_ANNUAL
  ORGANIZATION
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
  TRIALING
  EXPIRED
}

enum ResourceType {
  GUIDE
  HANDOUT
  TOOLKIT
  STRATEGY
  FAMILY_COMPANION
}

enum ResourceCategory {
  BEHAVIOR
  TRANSITIONS
  ROUTINES
  COMMUNICATION
  DEVELOPMENT
}

enum EngagementAction {
  VIEW
  DOWNLOAD
  SEARCH
  STRATEGY_USE
  REFLECTION
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum OrganizationRole {
  OWNER
  ADMIN
  EDUCATOR
}
// Core Models
model User {
  id                String            @id @default(cuid())
  clerkId           String            @unique
  email             String            @unique
  fullName          String
  role              Role              @default(EDUCATOR)
  preferredLanguage Language          @default(ENGLISH)
  learningStyle     String?
  teachingStyle     String?
  onboardingStatus  OnboardingStatus  @default(INCOMPLETE)
  subscriptionPlan  SubscriptionPlan?
  subscriptionStatus SubscriptionStatus?
  stripeCustomerId  String?
  organizationId    String?
  organizationRole  OrganizationRole? @default(EDUCATOR)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  organization      Organization?     @relation("OrganizationMembers", fields: [organizationId], references: [id], onDelete: SetNull)
  ownedOrganization Organization?     @relation("OrganizationOwner")
  classrooms        Classroom[]
  behaviorLogs      BehaviorLog[]
  classroomLogs     ClassroomLog[]
  engagementMetrics EngagementMetrics[]
  reflectionPrompts ReflectionPrompt[]
  sentInvitations   Invitation[]      @relation("InvitationSender")

  @@map("users")
}

model Organization {
  id                String            @id @default(cuid())
  name              String
  type              String            // school, district, childcare_center, nonprofit, other
  ownerId           String            @unique
  subscriptionId    String?           @unique
  settings          Json?             // Organization-wide settings
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  owner             User              @relation("OrganizationOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  members           User[]            @relation("OrganizationMembers")
  subscription      Subscription?     @relation("OrganizationSubscription")
  invitations       Invitation[]
  ownershipHistory  OwnershipHistory[]

  @@map("organizations")
}

model Subscription {
  id                String            @id @default(cuid())
  organizationId    String            @unique
  plan              String            // basic, pro, district
  maxSeats          Int
  activeSeats       Int               @default(0)
  status            SubscriptionStatus @default(TRIALING)
  stripeSubscriptionId String?
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  organization      Organization      @relation("OrganizationSubscription", fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Invitation {
  id                String            @id @default(cuid())
  email             String
  organizationId    String
  invitedBy         String
  status            InvitationStatus  @default(PENDING)
  token             String            @unique // For secure invitation links
  expiresAt         DateTime
  acceptedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter           User              @relation("InvitationSender", fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, organizationId]) // Prevent duplicate invites for same email/org
  @@map("invitations")
}

model OwnershipHistory {
  id                String            @id @default(cuid())
  organizationId    String
  previousOwnerId   String
  newOwnerId        String
  transferredBy     String
  reason            String?
  createdAt         DateTime          @default(now())

  // Relations
  organization      Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("ownership_history")
}
model Classroom {
  id                   String   @id @default(cuid())
  name                 String
  gradeBand            String
  studentCount         Int
  teacherStudentRatio  String
  iepCount             Int?     @default(0)
  ifspCount            Int?     @default(0)
  stressors            String[] // Array of stressor strings
  educatorId           String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  educator             User           @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  children             Child[]
  behaviorLogs         BehaviorLog[]
  classroomLogs        ClassroomLog[]

  @@map("classrooms")
}

model Child {
  id                   String   @id @default(cuid())
  name                 String
  age                  Int?
  gradeBand            String
  classroomId          String
  developmentalNotes   String?
  languageAbility      String?
  selfRegulationSkills String?
  sensorySensitivities String[] // Array of sensitivities
  hasIEP               Boolean  @default(false)
  hasIFSP              Boolean  @default(false)
  supportPlans         String[] // Array of support plan strings
  knownTriggers        String[] // Array of trigger strings
  homeLanguage         String?
  familyContext        String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  classroom            Classroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  behaviorLogs         BehaviorLog[]

  @@map("children")
}

model BehaviorLog {
  id                    String        @id @default(cuid())
  educatorId            String
  childId               String?
  classroomId           String?
  behaviorDescription   String
  context               String
  timeOfDay             String?
  severity              Severity
  educatorMood          EducatorMood?
  stressors             String[]      // Array of stressor strings
  intensity             String?
  duration              String?
  frequency             String?
  adultResponse         String[]      // Array of response strings
  outcome               String[]      // Array of outcome strings
  developmentalNotes    String?
  supports              String[]      // Array of support strings
  classroomRatio        String?
  resourcesAvailable    String[]      // Array of resource strings
  educatorStressLevel   String?
  confidenceLevel       Int?
  aiResponse            Json?         // Store AI response as JSON
  selectedStrategy      String?
  confidenceRating      Int?
  reflectionNotes       String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  educator              User          @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  child                 Child?        @relation(fields: [childId], references: [id], onDelete: SetNull)
  classroom             Classroom?    @relation(fields: [classroomId], references: [id], onDelete: SetNull)
  reflectionPrompts     ReflectionPrompt[]

  @@map("behavior_logs")
}

model ClassroomLog {
  id                        String        @id @default(cuid())
  educatorId                String
  classroomId               String
  challengeDescription      String
  context                   String
  severity                  Severity
  educatorMood              EducatorMood?
  stressors                 String[]      // Array of stressor strings
  aiResponse                Json?         // Store AI response as JSON
  selectedStrategy          String?
  confidenceSelfRating      Int?
  confidenceStrategyRating  Int?
  reflectionNotes           String?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  // Relations
  educator                  User          @relation(fields: [educatorId], references: [id], onDelete: Cascade)
  classroom                 Classroom     @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  reflectionPrompts         ReflectionPrompt[]

  @@map("classroom_logs")
}

model Resource {
  id                String           @id @default(cuid())
  title             String
  description       String
  type              ResourceType
  category          ResourceCategory
  ageGroups         String[]         // Array of age group strings
  settings          String[]         // Array of setting strings
  language          Language         @default(ENGLISH)
  isPremium         Boolean          @default(false)
  downloadUrl       String?
  familyCompanionId String?
  content           String?          // Store resource content
  metadata          Json?            // Additional metadata as JSON
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  engagementMetrics EngagementMetrics[]

  @@map("resources")
}

model FamilyCommunicationScript {
  id               String           @id @default(cuid())
  title            String
  category         String           // behavior_explanation, strengths_challenges, etc.
  scenario         String
  script           String           @db.Text
  familyHandoutId  String?
  language         Language         @default(ENGLISH)
  isPremium        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("family_communication_scripts")
}

model BehaviorPattern {
  id             String   @id @default(cuid())
  childId        String
  patternType    String   // context, time, trigger, severity
  description    String
  frequency      Int
  lastOccurrence DateTime
  trend          String   // increasing, decreasing, stable
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("behavior_patterns")
}

model EngagementMetrics {
  id         String           @id @default(cuid())
  userId     String
  resourceId String?
  action     EngagementAction
  metadata   Json?            // Additional data as JSON
  timestamp  DateTime         @default(now())

  // Relations
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource?        @relation(fields: [resourceId], references: [id], onDelete: SetNull)

  @@map("engagement_metrics")
}

model ReflectionPrompt {
  id               String        @id @default(cuid())
  behaviorLogId    String?
  classroomLogId   String?
  stressLevel      Int           // 1-10
  confidenceLevel  Int           // 1-10
  doabilityRating  Int           // 1-10
  notes            String?
  followUpNeeded   Boolean       @default(false)
  createdAt        DateTime      @default(now())

  // Relations
  behaviorLog      BehaviorLog?  @relation(fields: [behaviorLogId], references: [id], onDelete: Cascade)
  classroomLog     ClassroomLog? @relation(fields: [classroomLogId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String

  @@map("reflection_prompts")
}

// Knowledge Library Models (for admin management)
model TheoreticalFramework {
  id                String   @id @default(cuid())
  name              String   @unique
  coreIdea          String
  productPrinciples String[] // Array of principle strings
  aiHooks           String[] // Array of AI hook strings
  languagePatterns  String[] // Array of language pattern strings
  avoidancePatterns String[] // Array of avoidance pattern strings
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("theoretical_frameworks")
}

model StrategyTemplate {
  id                      String   @id @default(cuid())
  name                    String
  frameworks              String[] // Array of framework IDs
  ageGroups               String[] // Array of age group strings
  contexts                String[] // Array of context strings
  severity                String[] // Array of severity levels
  template                String   @db.Text
  variations              String[] // Array of variation strings
  futureReadinessBenefits String[] // Array of benefit strings
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("strategy_templates")
}

model LanguageGuideline {
  id       String   @id @default(cuid())
  category String   // tone, framing, avoidance, cultural
  rule     String
  examples Json     // Store examples as JSON
  isActive Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("language_guidelines")
}