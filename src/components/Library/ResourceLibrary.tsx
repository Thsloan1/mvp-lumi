import React, { useState, useMemo } from 'react';
import { Search, Filter, Download, ExternalLink, Star, Lock, BookOpen, FileText } from 'lucide-react';
import { Button } from '../UI/Button';
import { Card } from '../UI/Card';
import { Input } from '../UI/Input';
import { Select } from '../UI/Select';
import { EmptyState } from '../UI/EmptyState';
import { useAppContext } from '../../context/AppContext';
import { Resource, ResourceSearch } from '../../types';
import { STARTER_LIBRARY, RESOURCE_CATEGORIES, RESOURCE_TYPES, SETTINGS } from '../../data/starterLibrary';
import { GRADE_BAND_OPTIONS } from '../../data/constants';

const generateResourceContent = (resource: Resource): string => {
  return `LUMI RESOURCE: ${resource.title}

DESCRIPTION:
${resource.description}

AGE GROUPS: ${resource.ageGroups.join(', ')}
SETTINGS: ${resource.settings.join(', ')}
LANGUAGE: ${resource.language}
TYPE: ${resource.type}
CATEGORY: ${resource.category}

CONTENT:
This is a ${resource.type} focused on ${resource.category} for ${resource.ageGroups.join(' and ')} in ${resource.settings.join(' and ')} settings.

[Detailed content would be provided here in the full resource]

Generated by Lumi - Classroom Behavior Coach
Date: ${new Date().toLocaleDateString()}`;
};

export const ResourceLibrary: React.FC = () => {
  const { currentUser, setCurrentView } = useAppContext();
  const [searchParams, setSearchParams] = useState<ResourceSearch>({
    query: '',
    ageGroup: '',
    category: '',
    type: '',
    setting: '',
    language: ''
  });
  const [showFilters, setShowFilters] = useState(false);

  // Use only starter library resources
  const allResources = STARTER_LIBRARY;

  const filteredResources = useMemo(() => {
    return allResources.filter(resource => {
      // Text search
      if (searchParams.query && !resource.title.toLowerCase().includes(searchParams.query.toLowerCase()) &&
          !resource.description.toLowerCase().includes(searchParams.query.toLowerCase())) {
        return false;
      }

      // Age group filter
      if (searchParams.ageGroup && !resource.ageGroups.includes(searchParams.ageGroup)) {
        return false;
      }

      // Category filter
      if (searchParams.category && resource.category !== searchParams.category) {
        return false;
      }

      // Type filter
      if (searchParams.type && resource.type !== searchParams.type) {
        return false;
      }

      // Setting filter
      if (searchParams.setting && !resource.settings.includes(searchParams.setting)) {
        return false;
      }

      // Language filter
      if (searchParams.language && resource.language !== searchParams.language && resource.language !== 'bilingual') {
        return false;
      }

      return true;
    });
  }, [searchParams, allResources]);

  const handleSearchChange = (field: keyof ResourceSearch, value: string) => {
    setSearchParams(prev => ({ ...prev, [field]: value }));
  };

  const handleResourceAccess = (resource: Resource) => {
    if (resource.isPremium) {
      setCurrentView('subscription-plan');
      return;
    }
    
    // Track engagement
    console.log('Accessing resource:', resource.title);
    
    // Simulate download/view
    const link = document.createElement('a');
    link.href = `data:text/plain;charset=utf-8,${encodeURIComponent(generateResourceContent(resource))}`;
    link.download = `${resource.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const clearFilters = () => {
    setSearchParams({
      query: '',
      ageGroup: '',
      category: '',
      type: '',
      setting: '',
      language: ''
    });
  };

  const ageGroupOptions = GRADE_BAND_OPTIONS.map(option => ({
    value: option,
    label: option
  }));

  const categoryOptions = RESOURCE_CATEGORIES.map(cat => ({
    value: cat.id,
    label: cat.label
  }));

  const typeOptions = RESOURCE_TYPES.map(type => ({
    value: type.id,
    label: type.label
  }));

  const settingOptions = SETTINGS.map(setting => ({
    value: setting.id,
    label: setting.label
  }));

  const languageOptions = [
    { value: 'english', label: 'English' },
    { value: 'spanish', label: 'Spanish' },
    { value: 'bilingual', label: 'Bilingual' }
  ];

  return (
    <div className="min-h-screen bg-white">
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold text-[#1A1A1A] mb-2">
                Resource Library
              </h1>
              <p className="text-gray-600">
                Curated strategies and guides to support your classroom practice
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="bg-[#F8F6F4] px-3 py-1 rounded-full">
                <span className="text-sm font-medium text-[#C44E38]">
                  {STARTER_LIBRARY.length} Free Resources
                </span>
              </div>
              <Button
                variant="outline"
                onClick={() => setCurrentView('lumied-upsell')}
                icon={ExternalLink}
              >
                Explore LumiEd
              </Button>
            </div>
          </div>

          {/* Search and Filters */}
          <div className="space-y-4">
            <div className="flex items-center space-x-4">
              <div className="flex-1">
                <Input
                  value={searchParams.query}
                  onChange={(value) => handleSearchChange('query', value)}
                  placeholder="Search resources..."
                />
              </div>
              <Button
                variant="outline"
                onClick={() => setShowFilters(!showFilters)}
                icon={Filter}
              >
                Filters
              </Button>
            </div>

            {showFilters && (
              <Card className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                  <Select
                    label="Age Group"
                    value={searchParams.ageGroup || ''}
                    onChange={(value) => handleSearchChange('ageGroup', value)}
                    options={ageGroupOptions}
                    placeholder="All ages"
                  />
                  <Select
                    label="Category"
                    value={searchParams.category || ''}
                    onChange={(value) => handleSearchChange('category', value)}
                    options={categoryOptions}
                    placeholder="All categories"
                  />
                  <Select
                    label="Type"
                    value={searchParams.type || ''}
                    onChange={(value) => handleSearchChange('type', value)}
                    options={typeOptions}
                    placeholder="All types"
                  />
                  <Select
                    label="Setting"
                    value={searchParams.setting || ''}
                    onChange={(value) => handleSearchChange('setting', value)}
                    options={settingOptions}
                    placeholder="All settings"
                  />
                  <Select
                    label="Language"
                    value={searchParams.language || ''}
                    onChange={(value) => handleSearchChange('language', value)}
                    options={languageOptions}
                    placeholder="All languages"
                  />
                </div>
              </Card>
            )}
          </div>
        </div>

        {/* Results */}
        <div className="mb-6">
          <p className="text-gray-600">
            Showing {filteredResources.length} resources
            {searchParams.query && ` for "${searchParams.query}"`}
          </p>
        </div>

        {/* Resource Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredResources.map((resource) => {
            const category = RESOURCE_CATEGORIES.find(cat => cat.id === resource.category);
            const type = RESOURCE_TYPES.find(t => t.id === resource.type);
            
            return (
              <Card key={resource.id} className="p-6 h-full flex flex-col">
                <div className="flex items-start justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <span className="text-lg">{category?.icon}</span>
                    <span className="text-xs font-medium text-[#C44E38] uppercase tracking-wide">
                      {type?.label}
                    </span>
                  </div>
                  {resource.isPremium && (
                    <div className="flex items-center space-x-1 bg-yellow-100 px-2 py-1 rounded-full">
                      <Lock className="w-3 h-3 text-yellow-600" />
                      <span className="text-xs font-medium text-yellow-600">Premium</span>
                    </div>
                  )}
                </div>

                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-[#1A1A1A] mb-2">
                    {resource.title}
                  </h3>
                  <p className="text-sm text-gray-600 mb-4 line-clamp-3">
                    {resource.description}
                  </p>

                  <div className="space-y-2 mb-4">
                    <div className="flex flex-wrap gap-1">
                      {resource.ageGroups.slice(0, 2).map((age, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 bg-[#F8F6F4] text-xs text-gray-700 rounded-full"
                        >
                          {age.split(' ')[0]}
                        </span>
                      ))}
                      {resource.ageGroups.length > 2 && (
                        <span className="px-2 py-1 bg-[#F8F6F4] text-xs text-gray-700 rounded-full">
                          +{resource.ageGroups.length - 2} more
                        </span>
                      )}
                    </div>
                    
                    <div className="flex items-center justify-between text-xs text-gray-500">
                      <span>{resource.language === 'bilingual' ? '🌐 Bilingual' : resource.language}</span>
                      <span>{resource.settings.join(', ')}</span>
                    </div>
                  </div>
                </div>

                <div className="pt-4 border-t border-[#E6E2DD]">
                  <div className="space-y-2">
                    <Button
                      onClick={() => handleResourceAccess(resource)}
                      className="w-full"
                      icon={Download}
                    >
                      Access Resource
                    </Button>
                    {resource.familyCompanionId && (
                      <Button
                        onClick={() => {
                          const companion = STARTER_LIBRARY.find(r => r.id === resource.familyCompanionId);
                          if (companion) handleResourceAccess(companion);
                        }}
                        variant="outline"
                        size="sm"
                        className="w-full"
                      >
                        + Family Companion
                      </Button>
                    )}
                  </div>
                </div>
              </Card>
            );
          })}
        </div>

        {filteredResources.length === 0 && (
          <EmptyState
            icon={Search}
            title="No resources found"
            description="Try adjusting your search or filters to find what you're looking for."
            actionLabel="Clear Filters"
            onAction={clearFilters}
          />
        )}
      </div>
    </div>
  );
};