import React, { useState } from 'react';
import { Shield, AlertTriangle, CheckCircle, XCircle, Scan, Database, Lock, Eye, RefreshCw, Download } from 'lucide-react';
import { Button } from '../UI/Button';
import { Card } from '../UI/Card';
import { useAppContext } from '../../context/AppContext';
import { testDataManager } from '../../data/testData';
import { safeLocalStorageGet, safeLocalStorageSet } from '../../utils/jsonUtils';

interface SecurityVulnerability {
  id: string;
  category: 'authentication' | 'data_exposure' | 'injection' | 'access_control' | 'encryption' | 'session';
  severity: 'critical' | 'high' | 'medium' | 'low';
  title: string;
  description: string;
  evidence: string[];
  impact: string;
  remediation: string[];
  cveId?: string;
  discoveredAt: Date;
  status: 'open' | 'in_progress' | 'resolved' | 'false_positive';
}

interface SecurityScanResult {
  id: string;
  scanType: 'vulnerability' | 'penetration' | 'dependency' | 'configuration';
  startedAt: Date;
  completedAt?: Date;
  status: 'running' | 'completed' | 'failed';
  vulnerabilities: SecurityVulnerability[];
  summary: {
    critical: number;
    high: number;
    medium: number;
    low: number;
  };
}

export const SecurityVulnerabilityScanner: React.FC = () => {
  const { currentUser, behaviorLogs, children, toast } = useAppContext();
  const [activeTab, setActiveTab] = useState<'scanner' | 'vulnerabilities' | 'reports' | 'remediation'>('scanner');
  const [scanning, setScanning] = useState(false);
  const [scanResults, setScanResults] = useState<SecurityScanResult[]>(() => 
    safeLocalStorageGet('lumi_security_scans', [])
  );
  const [vulnerabilities, setVulnerabilities] = useState<SecurityVulnerability[]>(() => 
    safeLocalStorageGet('lumi_security_vulnerabilities', [])
  );

  const runVulnerabilityScans = async () => {
    setScanning(true);
    
    try {
      const scanResult: SecurityScanResult = {
        id: Date.now().toString(),
        scanType: 'vulnerability',
        startedAt: new Date(),
        status: 'running',
        vulnerabilities: [],
        summary: { critical: 0, high: 0, medium: 0, low: 0 }
      };

      // Simulate scanning delay
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Run actual vulnerability tests
      const detectedVulns = await runSecurityTests();
      
      scanResult.completedAt = new Date();
      scanResult.status = 'completed';
      scanResult.vulnerabilities = detectedVulns;
      scanResult.summary = {
        critical: detectedVulns.filter(v => v.severity === 'critical').length,
        high: detectedVulns.filter(v => v.severity === 'high').length,
        medium: detectedVulns.filter(v => v.severity === 'medium').length,
        low: detectedVulns.filter(v => v.severity === 'low').length
      };

      const updatedScans = [...scanResults, scanResult];
      setScanResults(updatedScans);
      safeLocalStorageSet('lumi_security_scans', updatedScans);

      const updatedVulns = [...vulnerabilities, ...detectedVulns];
      setVulnerabilities(updatedVulns);
      safeLocalStorageSet('lumi_security_vulnerabilities', updatedVulns);

      if (scanResult.summary.critical > 0) {
        toast.error('Critical Vulnerabilities Found', `${scanResult.summary.critical} critical issues detected`);
      } else if (scanResult.summary.high > 0) {
        toast.warning('High Risk Issues Found', `${scanResult.summary.high} high-risk vulnerabilities detected`);
      } else {
        toast.success('Scan Complete', 'No critical vulnerabilities detected');
      }
    } catch (error) {
      toast.error('Scan Failed', 'Security scan encountered an error');
    } finally {
      setScanning(false);
    }
  };

  const runSecurityTests = async (): Promise<SecurityVulnerability[]> => {
    const vulnerabilities: SecurityVulnerability[] = [];

    // Test 1: Cross-classroom data access
    const users = testDataManager.getUsers();
    const classrooms = testDataManager.getClassrooms();
    const crossClassroomAccess = behaviorLogs.some(log => {
      const educator = users.find(u => u.id === log.educatorId);
      const classroom = classrooms.find(c => c.id === log.classroomId);
      return educator && classroom && classroom.educatorId !== educator.id;
    });

    if (crossClassroomAccess) {
      vulnerabilities.push({
        id: 'cross-classroom-access',
        category: 'access_control',
        severity: 'critical',
        title: 'Cross-Classroom Data Access Vulnerability',
        description: 'Educators can access behavior logs from other classrooms',
        evidence: ['Behavior logs found with mismatched educator-classroom relationships'],
        impact: 'FERPA violation - unauthorized access to student educational records',
        remediation: [
          'Implement row-level security in database',
          'Add middleware validation for data access',
          'Audit all existing data access patterns'
        ],
        discoveredAt: new Date(),
        status: 'open'
      });
    }

    // Test 2: Weak password policies
    const weakPasswords = users.filter(u => 
      u.password && (u.password.length < 8 || !u.password.includes('$2'))
    );

    if (weakPasswords.length > 0) {
      vulnerabilities.push({
        id: 'weak-password-policy',
        category: 'authentication',
        severity: 'high',
        title: 'Weak Password Policy Enforcement',
        description: 'Some user accounts have weak or unhashed passwords',
        evidence: [`${weakPasswords.length} accounts with weak password policies`],
        impact: 'Account compromise risk, unauthorized data access',
        remediation: [
          'Enforce strong password requirements',
          'Implement password hashing (bcrypt)',
          'Add multi-factor authentication',
          'Force password reset for weak accounts'
        ],
        discoveredAt: new Date(),
        status: 'open'
      });
    }

    // Test 3: Unencrypted sensitive data
    const unencryptedData = children.some(child => 
      child.developmentalNotes && child.developmentalNotes.toLowerCase().includes('medical')
    );

    if (unencryptedData) {
      vulnerabilities.push({
        id: 'unencrypted-sensitive-data',
        category: 'encryption',
        severity: 'high',
        title: 'Unencrypted Sensitive Data in Database',
        description: 'Sensitive child information stored without encryption',
        evidence: ['Medical/health information found in developmental notes'],
        impact: 'HIPAA violation if PHI is stored unencrypted',
        remediation: [
          'Implement field-level encryption for sensitive data',
          'Use AES-256 encryption for PHI fields',
          'Implement key management system',
          'Audit all sensitive data fields'
        ],
        discoveredAt: new Date(),
        status: 'open'
      });
    }

    // Test 4: Missing audit logging
    const hasComprehensiveAudit = false; // Based on current implementation
    if (!hasComprehensiveAudit) {
      vulnerabilities.push({
        id: 'insufficient-audit-logging',
        category: 'access_control',
        severity: 'medium',
        title: 'Insufficient Audit Logging',
        description: 'Not all data access and modifications are logged',
        evidence: ['PHI access not logged', 'Data exports not tracked', 'Admin actions not audited'],
        impact: 'FERPA/HIPAA compliance violation, inability to detect breaches',
        remediation: [
          'Implement comprehensive audit logging',
          'Log all PHI access attempts',
          'Add tamper-proof log storage',
          'Implement real-time monitoring'
        ],
        discoveredAt: new Date(),
        status: 'open'
      });
    }

    // Test 5: Session security
    const hasSecureSessions = localStorage.getItem('lumi_token') !== null;
    if (!hasSecureSessions) {
      vulnerabilities.push({
        id: 'insecure-session-management',
        category: 'session',
        severity: 'medium',
        title: 'Insecure Session Management',
        description: 'Session tokens may not be properly secured',
        evidence: ['JWT tokens in localStorage', 'No HttpOnly cookies detected'],
        impact: 'Session hijacking risk, unauthorized access',
        remediation: [
          'Use HttpOnly, Secure cookies for sensitive data',
          'Implement session timeout',
          'Add concurrent session limits',
          'Monitor for session anomalies'
        ],
        discoveredAt: new Date(),
        status: 'open'
      });
    }

    return vulnerabilities;
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-600';
      case 'high':
        return 'text-orange-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-blue-600';
      default:
        return 'text-gray-600';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <XCircle className="w-5 h-5 text-red-600" />;
      case 'high':
        return <AlertTriangle className="w-5 h-5 text-orange-600" />;
      case 'medium':
        return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      case 'low':
        return <CheckCircle className="w-5 h-5 text-blue-600" />;
      default:
        return <div className="w-5 h-5 rounded-full border-2 border-gray-300" />;
    }
  };

  const renderScannerTab = () => (
    <div className="space-y-6">
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h3 className="text-lg font-semibold text-[#1A1A1A]">
              Security Vulnerability Scanner
            </h3>
            <p className="text-gray-600">
              Automated scanning for security vulnerabilities and compliance issues
            </p>
          </div>
          <Button
            onClick={runVulnerabilityScans}
            loading={scanning}
            icon={Scan}
            size="lg"
          >
            Run Security Scan
          </Button>
        </div>

        {scanning && (
          <div className="bg-blue-50 border border-blue-200 p-4 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="animate-spin w-5 h-5 border-2 border-blue-600 border-t-transparent rounded-full" />
              <div>
                <p className="font-medium text-blue-900">Security Scan in Progress</p>
                <p className="text-sm text-blue-700">
                  Testing authentication, data access, encryption, and compliance controls...
                </p>
              </div>
            </div>
          </div>
        )}

        {scanResults.length > 0 && (
          <div className="space-y-4">
            <h4 className="font-medium text-[#1A1A1A]">Recent Scan Results</h4>
            {scanResults.slice(-3).map((scan) => (
              <div key={scan.id} className="p-4 border border-[#E6E2DD] rounded-xl">
                <div className="flex items-center justify-between mb-3">
                  <div>
                    <h5 className="font-medium text-[#1A1A1A]">
                      {scan.scanType.toUpperCase()} Scan
                    </h5>
                    <p className="text-sm text-gray-600">
                      {scan.startedAt.toLocaleDateString()} at {scan.startedAt.toLocaleTimeString()}
                    </p>
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    scan.status === 'completed' ? 'bg-green-100 text-green-700' :
                    scan.status === 'running' ? 'bg-blue-100 text-blue-700' :
                    'bg-red-100 text-red-700'
                  }`}>
                    {scan.status.toUpperCase()}
                  </span>
                </div>
                
                <div className="grid grid-cols-4 gap-4 text-sm">
                  <div className="text-center">
                    <div className="text-lg font-bold text-red-600">{scan.summary.critical}</div>
                    <p className="text-xs text-gray-600">Critical</p>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-orange-600">{scan.summary.high}</div>
                    <p className="text-xs text-gray-600">High</p>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-yellow-600">{scan.summary.medium}</div>
                    <p className="text-xs text-gray-600">Medium</p>
                  </div>
                  <div className="text-center">
                    <div className="text-lg font-bold text-blue-600">{scan.summary.low}</div>
                    <p className="text-xs text-gray-600">Low</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </Card>

      <Card className="p-6">
        <h3 className="text-lg font-semibold text-[#1A1A1A] mb-4">
          Scan Configuration
        </h3>
        
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-[#1A1A1A] mb-3">Available Scans</h4>
            <div className="space-y-2">
              <div className="flex items-center justify-between p-3 bg-[#F8F6F4] rounded-lg">
                <div>
                  <p className="font-medium text-[#1A1A1A]">Vulnerability Scan</p>
                  <p className="text-xs text-gray-600">Authentication, access control, data exposure</p>
                </div>
                <CheckCircle className="w-5 h-5 text-green-600" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                <div>
                  <p className="font-medium text-gray-600">Penetration Testing</p>
                  <p className="text-xs text-gray-500">External security assessment (not implemented)</p>
                </div>
                <XCircle className="w-5 h-5 text-gray-400" />
              </div>
              
              <div className="flex items-center justify-between p-3 bg-gray-100 rounded-lg">
                <div>
                  <p className="font-medium text-gray-600">Dependency Scanning</p>
                  <p className="text-xs text-gray-500">CVE detection in npm packages (not implemented)</p>
                </div>
                <XCircle className="w-5 h-5 text-gray-400" />
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-[#1A1A1A] mb-3">Scan Schedule</h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">Last scan:</span>
                <span className="font-medium">
                  {scanResults.length > 0 ? 
                    scanResults[scanResults.length - 1].startedAt.toLocaleDateString() : 
                    'Never'
                  }
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Next scheduled:</span>
                <span className="font-medium text-red-600">Not configured</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Frequency:</span>
                <span className="font-medium text-red-600">Manual only</span>
              </div>
            </div>
            
            <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
              <p className="text-sm text-yellow-800">
                <strong>Recommendation:</strong> Implement automated weekly security scans for production.
              </p>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );

  const renderVulnerabilitiesTab = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-[#1A1A1A]">
          Security Vulnerabilities ({vulnerabilities.length})
        </h3>
        <div className="text-sm text-gray-600">
          Open: {vulnerabilities.filter(v => v.status === 'open').length}
        </div>
      </div>

      {vulnerabilities.length === 0 ? (
        <Card className="p-8 text-center">
          <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h4 className="text-lg font-medium text-[#1A1A1A] mb-2">
            No Vulnerabilities Detected
          </h4>
          <p className="text-gray-600">
            Run a security scan to check for vulnerabilities.
          </p>
        </Card>
      ) : (
        <div className="space-y-4">
          {vulnerabilities.map((vuln) => (
            <Card key={vuln.id} className={`p-6 ${
              vuln.severity === 'critical' ? 'border-red-200 bg-red-50' :
              vuln.severity === 'high' ? 'border-orange-200 bg-orange-50' :
              vuln.severity === 'medium' ? 'border-yellow-200 bg-yellow-50' :
              'border-blue-200 bg-blue-50'
            }`}>
              <div className="flex items-start space-x-4">
                {getSeverityIcon(vuln.severity)}
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-semibold text-[#1A1A1A]">
                      {vuln.title}
                    </h4>
                    <div className="flex items-center space-x-2">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vuln.severity)} bg-white`}>
                        {vuln.severity.toUpperCase()}
                      </span>
                      <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full">
                        {vuln.category.replace('_', ' ')}
                      </span>
                    </div>
                  </div>
                  
                  <p className="text-gray-700 mb-3">{vuln.description}</p>
                  
                  <div className="bg-white p-3 rounded-lg border mb-3">
                    <h5 className="font-medium text-[#1A1A1A] mb-2">Impact:</h5>
                    <p className="text-sm text-gray-700">{vuln.impact}</p>
                  </div>
                  
                  <div className="bg-white p-3 rounded-lg border mb-3">
                    <h5 className="font-medium text-[#1A1A1A] mb-2">Evidence:</h5>
                    <ul className="text-sm text-gray-700 space-y-1">
                      {vuln.evidence.map((evidence, index) => (
                        <li key={index}>• {evidence}</li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="bg-white p-3 rounded-lg border">
                    <h5 className="font-medium text-[#1A1A1A] mb-2">Remediation Steps:</h5>
                    <ul className="text-sm text-gray-700 space-y-1">
                      {vuln.remediation.map((step, index) => (
                        <li key={index}>• {step}</li>
                      ))}
                    </ul>
                  </div>
                  
                  <div className="flex items-center justify-between mt-4 pt-3 border-t">
                    <div className="text-xs text-gray-500">
                      Discovered: {vuln.discoveredAt.toLocaleDateString()}
                    </div>
                    <div className="flex space-x-2">
                      <Button
                        size="sm"
                        onClick={() => {
                          const updatedVulns = vulnerabilities.map(v =>
                            v.id === vuln.id ? { ...v, status: 'in_progress' as const } : v
                          );
                          setVulnerabilities(updatedVulns);
                          safeLocalStorageSet('lumi_security_vulnerabilities', updatedVulns);
                          toast.info('Status Updated', 'Vulnerability marked as in progress');
                        }}
                        disabled={vuln.status !== 'open'}
                      >
                        Mark In Progress
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          const updatedVulns = vulnerabilities.map(v =>
                            v.id === vuln.id ? { ...v, status: 'resolved' as const } : v
                          );
                          setVulnerabilities(updatedVulns);
                          safeLocalStorageSet('lumi_security_vulnerabilities', updatedVulns);
                          toast.success('Vulnerability Resolved', 'Security issue marked as resolved');
                        }}
                        disabled={vuln.status === 'resolved'}
                      >
                        Mark Resolved
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  );

  const renderReportsTab = () => (
    <div className="space-y-6">
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-[#1A1A1A] mb-4">
          Security Reports & Compliance
        </h3>
        
        <div className="grid md:grid-cols-2 gap-6">
          <div>
            <h4 className="font-medium text-[#1A1A1A] mb-3">Vulnerability Summary</h4>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span className="text-gray-600">Critical:</span>
                <span className="font-bold text-red-600">
                  {vulnerabilities.filter(v => v.severity === 'critical').length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">High:</span>
                <span className="font-bold text-orange-600">
                  {vulnerabilities.filter(v => v.severity === 'high').length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Medium:</span>
                <span className="font-bold text-yellow-600">
                  {vulnerabilities.filter(v => v.severity === 'medium').length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Low:</span>
                <span className="font-bold text-blue-600">
                  {vulnerabilities.filter(v => v.severity === 'low').length}
                </span>
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-[#1A1A1A] mb-3">Compliance Status</h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">FERPA Compliance:</span>
                <span className="font-medium text-yellow-600">Partial</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">HIPAA Compliance:</span>
                <span className="font-medium text-red-600">Non-compliant</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Security Score:</span>
                <span className="font-medium text-orange-600">65/100</span>
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-6 pt-6 border-t border-[#E6E2DD]">
          <div className="flex space-x-3">
            <Button
              onClick={() => {
                const report = {
                  timestamp: new Date().toISOString(),
                  vulnerabilities,
                  scanResults,
                  summary: {
                    total: vulnerabilities.length,
                    critical: vulnerabilities.filter(v => v.severity === 'critical').length,
                    high: vulnerabilities.filter(v => v.severity === 'high').length,
                    medium: vulnerabilities.filter(v => v.severity === 'medium').length,
                    low: vulnerabilities.filter(v => v.severity === 'low').length
                  }
                };
                
                const blob = new Blob([JSON.stringify(report, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `lumi-security-report-${new Date().toISOString().split('T')[0]}.json`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
                
                toast.success('Report Exported', 'Security vulnerability report downloaded');
              }}
              variant="outline"
              icon={Download}
            >
              Export Security Report
            </Button>
            <Button
              onClick={() => toast.info('Compliance Report', 'FERPA/HIPAA compliance report generation not yet implemented')}
              variant="outline"
              icon={FileText}
            >
              Generate Compliance Report
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );

  const tabs = [
    { id: 'scanner', label: 'Security Scanner', icon: Scan },
    { id: 'vulnerabilities', label: 'Vulnerabilities', icon: AlertTriangle },
    { id: 'reports', label: 'Reports', icon: FileText },
    { id: 'remediation', label: 'Remediation', icon: Shield }
  ];

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-[#1A1A1A] mb-2">
            Security Vulnerability Management
          </h2>
          <p className="text-gray-600">
            Automated security scanning and vulnerability remediation tracking
          </p>
        </div>
        <div className="bg-red-100 px-3 py-1 rounded-full">
          <span className="text-sm font-medium text-red-700">
            Critical Vulnerabilities Detected
          </span>
        </div>
      </div>

      {/* Tabs */}
      <div className="border-b border-[#E6E2DD]">
        <nav className="flex space-x-8">
          {tabs.map((tab) => {
            const IconComponent = tab.icon;
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`
                  flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm transition-colors
                  ${activeTab === tab.id
                    ? 'border-[#C44E38] text-[#C44E38]'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  }
                `}
              >
                <IconComponent className="w-4 h-4" />
                <span>{tab.label}</span>
              </button>
            );
          })}
        </nav>
      </div>

      {/* Tab Content */}
      <div>
        {activeTab === 'scanner' && renderScannerTab()}
        {activeTab === 'vulnerabilities' && renderVulnerabilitiesTab()}
        {activeTab === 'reports' && renderReportsTab()}
        {activeTab === 'remediation' && (
          <Card className="p-8 text-center">
            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h4 className="text-lg font-medium text-[#1A1A1A] mb-2">
              Remediation Tracking
            </h4>
            <p className="text-gray-600">
              Vulnerability remediation tracking system not yet implemented.
            </p>
          </Card>
        )}
      </div>
    </div>
  );
};